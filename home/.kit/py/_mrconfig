# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=bash
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/DepoXy/depoxy#🍯
# License: MIT

# ========================================================================
# ------------------------------------------------------------------------

[DEFAULT]
order = 695

# ========================================================================
# ------------------------------------------------------------------------

[${DOPP_KIT:-${HOME}/.kit}/py/pyenv]
checkout =
  # Skip if using Homebrew pyenv, prob. b/c user ran @macOS onboarder
  #   ~/.kit/mOS/macOS-onboarder/install-homebrew.sh
  # Otherwise might be, e.g., author's Linux env. (where I don't (or
  # haven't started to) use Homebrew).
  if [ ! -e "${HOMEBREW_PREFIX}/bin/pyenv" ]; then
    git_clone_giturl -o starter 'git@github.com:pyenv/pyenv.git' 'pyenv'
  else
    mkdir -p "${MR_REPO}"
    touch -- "${MR_REPO}/.omr-placeholder"
  fi
echoInstallHelp =
  echoInstallHelp 'os_linux' 'dxy_all'
  #
  echo "🔳 DepoXy: Install \`pyenv\` Python versions::
    mr -d \"${MR_REPO}\" -n installpythons
 "
install = install_os_specific
installDarwin =
  if [ ! -e "${HOMEBREW_PREFIX}/bin/pyenv" ]; then
    warn "Please install \`pyenv\` from Homebrew"
    #
    return 1
  fi
installLinux =
  pull_latest "starter" "master" "" "main"
  #
  src/configure
  make -C src
  #
  # TRACK/2024-02-22: I removed a stray "man/index.db", not sure
  # what from, its date didn't match other build assets, e.g.,
  #   Feb 17 23:40 man/index.db
  # Vs.
  #   Nov 13 00:46 libexec/pyenv
  #   ...
  #   Sep 29  2022 libexec/pyenv-realpath.dylib
  # TRACK/2024-03-20 22:26: Again!
  #   Mar 20 21:54 man/index.db
  # - I ran `PREFIX=~/.local make install` at that time (per ~/.bash_history)
  #   from a separate shell project, don't see how that wouldn't caused it...
  #   - Though I wonder if it could've been this command:
  #       2024-03-20 21:54:26 PREFIX=~/.local make installMan
  #     Nope, rerunning that didn't recreate man/index.db. Huh...
  # - So keep an eye out for it. If it is make related, since there's
  #   no `make clean`, do it yourself, e.g.,
  #     command rm -f -- "man/index.db"
  # TRACK/2024-02-26 23:04: Removed man/index.db again, but unsure if
  # from `src/configure` or `make -C src`, because after re-running the
  # build, man/index.db was not recreated.
  #
  # SAVVY: We don't also install Python versions now, which takes a while, e.g.,
  #   mr -d ${MR_REPO} -n installpythons
  # - Have the user call that deliberately, on their own time.
#
# USYNC: 
#   depoxy_configure_remind_task_install_omr_projects_python_pyenv
#     file://~/.depoxy/ambers/bin/macOS/onboarder/slather-defaults.sh @ 421
installpythons =
  # Install all supported Pythons so they're at the ready.
  #   -s: --skip-existing
  # USYNC: pyenv-install-pys
  #   ~/.kit/py/easy-as-pypi/Makefile
  # USYNC: envlist
  #   ~/kit/.py/easy-as-pypi/tox.ini
  # USYNC: DEPOXY_PYENV_PYVERS
  #   ~/.config/depoxy/depoxyrc
  #   ~/.depoxy/ambers/archetype/home/.config/depoxy/depoxyrc.EVAL.sh
  # USYNC: Other 'installpythons' task(s):
  #   See virtualenvwrapper project, below
  pyenv install -s 3.8
  pyenv install -s 3.9
  pyenv install -s 3.10
  pyenv install -s 3.11
  pyenv install -s 3.12
  # Pre-release Python only installable by full version.
  # This installs the non-dev version, e.g., '3.13.0a1', not '3.13-dev'.
  pyenv install -s $(pyenv install -l | grep '^ \+3\.13\.' | tail -1)
  #
  mr -d "${MR_REPO}" -n installVirtualenvwrapper
  #
  # Latest EOL Pythons:
  #  pyenv install -s 3.5.10
  #  pyenv install -s 3.6.15
  #
# WIRET: Support `workon` from all pyenv envs.
# - REFER: https://github.com/landonb/virtualenvwrapper
installVirtualenvwrapper =
  command -v pyenv > /dev/null && eval "$(pyenv init -)" && pyenv shell --unset
  for pyvers in $(pyenv versions | sed 's/^[^ ]* *\([^ ]\+\)*.*/\1/'); do
    pyenv shell ${pyvers}
    #
    pip install --upgrade pip
    #
    vew_fork="${VENV_WRAP:-${DOPP_KIT:-${HOME}/.kit}/py/virtualenvwrapper}"
    if [ -d "${vew_fork}" ]; then
      pip install ${vew_fork}
    else
      pip install virtualenvwrapper
    fi
  done
infuse =
  if [ -e "${HOMEBREW_PREFIX}/bin/pyenv" ]; then
    return 0
  fi
  #
  # Wire project root.
  symlink_overlay_dir "${MR_REPO}" "${HOME}/.pyenv"
  # Wire executable.
  symlink_overlay_file "${MR_REPO}/bin/pyenv" "${HOME}/.local/bin/pyenv"
  # Effectively:
  #  symlink_overlay_file "${MR_REPO}/libexec/pyenv" "${HOME}/.local/bin/pyenv"
  # Copy pyenv manual.
  #  command cp -f -- man/man1/pyenv.1 ${HOME}/.local/share/man/man1
  #  echo "command cp -f -- man/man1/pyenv.1 ${HOME}/.local/share/man/man1"
  symlink_overlay_file "${MR_REPO}/man/man1/pyenv.1" "${HOME}/.local/share/man/man1/pyenv.1"
  # Wire the completions file (Homefries-specific).
  if [ -d "${HOME}/.homefries/bin/completions" ]; then
    cd "${HOME}/.homefries/bin/completions"
    symlink_overlay_file "${MR_REPO}/completions/pyenv.bash" pyenv.bash
  fi

# ========================================================================
# ------------------------------------------------------------------------

# I don't use this copy of pyenv-virtualenv; see brew-install version instead.
# - CXREF: ~/.kit/mOS/macOS-onboarder/install-homebrew.sh
[${DOPP_KIT:-${HOME}/.kit}/py/pyenv-virtualenv]
checkout =
  if [ ! -e "${HOMEBREW_PREFIX}/bin/pyenv-virtualenv" ]; then
    git_clone_giturl -o "starter" "pyenv/pyenv-virtualenv.git"
  else
    mkdir -p "${MR_REPO}"
    touch -- "${MR_REPO}/.omr-placeholder"
  fi
# USYNC: 
#   depoxy_configure_remind_task_install_omr_projects_python_pyenv_virtualenv
#     file://~/.depoxy/ambers/bin/macOS/onboarder/slather-defaults.sh @ 428
echoInstallHelp =
  local install_scope='os_all'
  local addendum=''
  if ! ${DXC_OMR_ENABLE_PYENV_VIRTUALENV:-false}; then
    install_scope='os_none'
    addendum='or not, really, it’s disabled'
  fi
  echoInstallHelp "${install_scope}" "dxy_all" "${addendum}"
install =
  # 2022-11-20: So far I just want `po shell` @home [on Linux, which is this path]
  # - SPOKE/SPIKE: Is there a diff. btw. pyenv-virtualenv (which uses py -m venv)
  #                                  and using poetry?
  #   - NTHEN: Pick a side, then remove pyenv-virtualenv if you don't want it.
  # - SPOKE/SPIKE/2023-01-29: Do I even use this @work anymore? Double-check perhaps,
  #                   another reason to remove this OMR project, perhaps.
  # - SAVVY/SPOKE/2023-10-10: I enhanced `workon` and use that for venvs.
  #   - CXREF: ~/.kit/py/virtualenvwrapper  # See my changes 2023-05-11/-12.
  #   - MAYBE: Retire this project.
  #     - My DepoXy does not set DXC_OMR_ENABLE_PYENV_VIRTUALENV,
  #       and I don't run this install during onboarding, so it's
  #       effectively disabled.
  #
  # Guard clause: You gotta want this
  if ! ${DXC_OMR_ENABLE_PYENV_VIRTUALENV:-false}; then
    info "Skipping py/pyenv-virtualenv b/c DXC_OMR_ENABLE_PYENV_VIRTUALENV falsey"
    #
    return 0
  fi
  #
  # Another guard: Skip if Homebrew got us
  [ ! -e "${HOMEBREW_PREFIX}/bin/pyenv-virtualenv" ] || return 0
  #
  # Now we're cleared
  local plugins_dir="$(pyenv root)/plugins"
  if [ -d "${plugins_dir}" ]; then
    symlink_overlay_dir "${MR_REPO}" "${plugins_dir}/pyenv-virtualenv"
  else
    warning "Could not identify/locate pyenv plugins directory: ${plugins_dir}"
    #
    return 1
  fi

# ========================================================================
# ------------------------------------------------------------------------

[${DOPP_KIT:-${HOME}/.kit}/py/virtualenvwrapper]
lib = MR_REPO_REMOTES="
  publish https://github.com/landonb/virtualenvwrapper.git
  starter https://github.com/python-virtualenvwrapper/virtualenvwrapper.git
  "
infuse =
  link_private_exclude "$@"
  symlink_mrinfuse_file ".editorconfig"
  symlink_overlay_file "README.txt" "README.rst"
  symlink_overlay_file "${MR_REPO}/virtualenvwrapper.sh" \
                       "${HOME}/.local/bin/virtualenvwrapper.sh"
  symlink_overlay_file "${MR_REPO}/virtualenvwrapper_lazy.sh" \
                       "${HOME}/.local/bin/virtualenvwrapper_lazy.sh"
# SAVVY/2024-02-27: After editing virtualenvwrapper.sh, re-install it, and restart shell.
echoInstallHelp =
  echoInstallHelp 'os_all' 'dxy_all'
  #
  echo "🔳 DepoXy: Install \`virtualenvwrapper\` to all Python versions::
    mr -d \"${MR_REPO}\" -n installpythons
 "
install =
  # Ensure `pyenv` not in effect.
  command -v pyenv > /dev/null && eval "$(pyenv init -)" && pyenv shell --unset
  #
  # Note there's a `make develop` option, but a few problems:
  # - On stock Ubuntu 22.04/Mint 21.3, you won't find /usr/bin/python
  #   - The 'python3.10-minimal' apt package installs /usr/bin/python3
  # - You could call what `make develop` calls:
  #     python3 setup.py develop
  #   But setup.py is deprecated in the latest Python versions, e.g.,
  #     $ python3 setup.py develop
  #     ...
  #     /usr/lib/python3/dist-packages/setuptools/command/easy_install.py:158:
  #       EasyInstallDeprecationWarning: easy_install command is deprecated.
  #       Use build and pip and other standards-based tools.
  #     ...
  #     /usr/lib/python3/dist-packages/setuptools/command/install.py:34:
  #       SetuptoolsDeprecationWarning: setup.py install is deprecated.
  #       Use build and pip and other standards-based tools.
  #     ...
  # - So we could grab what's on PyPI.
  #     pip install virtualenvwrapper 
  #   (Note our local changes would still work.)
  # - Or we could pip-install the path, which uses pyproject.toml.
  #
  # SAVVY/2024-02-27: `pip` is no longer install systemwide, just to venv's.
  # - Also, this is the only DepoXy task that needs pip, so isolating here.
  # - Note, too, `sudo apt install python3-pip` installs an outdated pip,
  #   and will cause `py3 -m pip install .` to create and install a package
  #   name "UNKNOWN".
  #     https://github.com/pypa/setuptools/issues/3269
  # - See also `python -m ensurepip`, but Ubuntu system python (from
  #   python3-minimal) does not include this module (though pip docs
  #   suggest it's always available from Python).
  if [ ! -e "${HOME}/.local/bin/pip" ]; then
    # SAVVY: build/ is ignored by both .gitignore and .ignore, so put
    # get-pip.py there, to be ignored but kept for reference (just in
    # case downloaded ever misbehaves and you need to inspect source).
    mkdir -p build/
    wget -O build/get-pip.py https://bootstrap.pypa.io/get-pip.py
    python3 build/get-pip.py
  fi
  #
  python3 -m pip install ${MR_REPO}
  #
  echo
  echo "YOU: Restart your shells to re-source virtualenvwrapper, if previously loaded"
  echo

# You need to install virtualenvwrapper systemwide for the basics
# to work, e.g., `workon`. But you also need to install it to the
# pyenv versions so that hooks don't fail (even if you don't use
# them), otherwise you'll see hook failure errors, e.g.,
#   $ workon <some-venv>
#   virtualenvwrapper.sh: Failed to run ‘post_activate’ hook
#   $ off
#   virtualenvwrapper.sh: Failed to run ‘pre_deactivate’ hook
installpythons =
  eval "$(pyenv init -)"
  #
  # USYNC: See pyenv installpythons versions, above.
  for pyver in \
    3.8 \
    3.9 \
    3.10 \
    3.11 \
    3.12 \
    3.13.0a3 \
  ; do
    pyenv shell ${pyver}
    python3 -m pip install ${MR_REPO}
  done

# ========================================================================
# ------------------------------------------------------------------------

# https://aws.amazon.com/cli/
# https://github.com/aws/aws-cli.git
# https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html
[${DOPP_KIT:-${HOME}/.kit}/py/aws-cli]
lib = MR_REPO_REMOTES="starter https://github.com/aws/aws-cli.git"
echoInstallHelp = echoInstallHelp 'os_maybe' 'dxy_limit' 'if that‘s something you‘ll use'
install =
  local downloads_dir="${DXY_DOWNLOADS_DIR:-${HF_DOWNLOADS_DIR:-${HOME}/.downloads}}"
  mkdir -p "${downloads_dir}"
  cd "${downloads_dir}"
  # I usually use `wget` for downloading files, and `curl` for testing API calls.
  # - But maybe I should get in the habit of using `curl` for all my calls.
  #
  #  wget "https://awscli.amazonaws.com/AWSCLIV2.pkg"
  local awscli_pkg="AWSCLIV2.pkg"
  # Only download again if package older than today, using curl 'continue' option.
  local midnight_file="$(mktemp)"
  if ! date --help > /dev/null 2>&1; then
    error "ERROR: Incompatible (not GNU) \`date\` command."
    if [ -n "${PYENV_VIRTUAL_ENV}" ]; then
      error "- HINT: Try exiting the virtualenv."
    fi
    #
    exit 1
  fi
  touch -t "$(date -d "today 0" +"%C%y%m%d%H%M.%S")" -- "${midnight_file}"
  local do_continue
  [ "${midnight_file}" -ot "${awscli_pkg}" ] && do_continue="-C -"
  curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "${awscli_pkg}" ${do_continue}
  #
  # *** System-wide install
  #
  #  sudo installer -pkg ./AWSCLIV2.pkg -target /
  #
  # *** User-local install
  # INERT/2022-11-04: This is the only app locally-installed to ~/.downloads.
  #                   But if I had more, I'd consider alt. dir., e.g., ~/.applications
  local install_base="${downloads_dir}"
  local install_home="${install_base}/aws-cli"
  #
  local choices_xml="${downloads_dir}/aws-cli-choices.xml"
  echo '<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
 <plist version="1.0">
   <array>
     <dict>
       <key>choiceAttribute</key>
       <string>customLocation</string>
       <key>attributeSetting</key>
       <string>'${install_base}'</string>
       <key>choiceIdentifier</key>
       <string>default</string>
     </dict>
   </array>
 </plist>' > "${choices_xml}"
  #
  installer \
    -pkg "${awscli_pkg}" \
    -target CurrentUserHomeDirectory \
    -applyChoiceChangesXML "${choices_xml}"
  #
  symlink_overlay_file "${install_home}/aws" "${HOME}/.local/bin/aws"
  symlink_overlay_file "${install_home}/aws_completer" "${HOME}/.local/bin/aws_completer"

# ========================================================================
# ------------------------------------------------------------------------

