# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=bash
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/DepoXy/depoxy#🍯
# License: MIT

# ========================================================================
# ------------------------------------------------------------------------

[DEFAULT]
order = 771

# ========================================================================
# ------------------------------------------------------------------------

# Multiple encfs mounter, unmounter, and burn-down-the-house panicker
# https://github.com/DepoXy/321open#👐
[${DOPP_KIT:-${HOME}/.kit}/odd/321open]
lib = remote_set publish https://github.com/DepoXy/321open.git#👐
order = 481
echoInstallHelp = echoInstallHelp 'os_all' 'dxy_all'
install =
  # CALSO: `make install` copies to ~/.local/bin; there's no `make link`:
  #   PREFIX="${HOME}/.local" make install
  symlink_overlay_file "${MR_REPO}/bin/321open" "${HOME}/.local/bin/321open"
  symlink_overlay_file "${MR_REPO}/bin/23skidoo" "${HOME}/.local/bin/23skidoo"
  # I rarely use these, but no reason not to.
  symlink_overlay_file "${MR_REPO}/bin/ssh-agent-kick" "${HOME}/.local/bin/ssh-agent-kick"
  symlink_overlay_file "${MR_REPO}/bin/ssh-agent-kill" "${HOME}/.local/bin/ssh-agent-kill"
# CXREF: link_hard_dep_macOS_disktools, update_deps_shoilerplate:
#   ~/.depoxy/ambers/home/.kit/git/ohmyrepos/lib/my-deps-manage-shoilerplate.sh
infuse = mr -d . -n infusePostRebase
infusePostRebase =
  link_hard_dep_macOS_disktools
  link_hard_dep_sh_err_trap
  link_hard_dep_sh_logger_and_colors
  link_hard_dep_sh_print_nanos_now
updateDeps = update_deps_shoilerplate

# ========================================================================
# ------------------------------------------------------------------------

# "Adds window-tiling hotkeys to any X11 desktop. (An analogue to
#  WinSplit Revolution for people who don't want to use Compiz Grid)"
[${DOPP_KIT:-${HOME}/.kit}/odd/x11/quicktile]
lib = remote_set starter https://github.com/ssokolow/quicktile.git
skip = os_is_macos || no_travel
ffssh = OMR_TRAVEL_BLOCKLISTED=true git_merge_ffonly_ssh_mirror "$@"
#
infuse = link_private_exclude "$@"
# This 'install' requires packages, but unsure which (on DepoXy Linux,
# what's required is already installed). If you haven't installed
# DepoXy, you might need to install deps, e.g., from quicktile docs:
#   sudo apt install -y \
#     python3 \
#     python3-pip \
#     python3-setuptools \
#     python3-gi \
#     python3-xlib \
#     python3-dbus \
#     gir1.2-glib-2.0 \
#     gir1.2-gtk-3.0 \
#     gir1.2-wnck-3.0
# - Except you don't need all these packages if you install from
#   source, and you probably don't want them installed system-
#   wide, anyway, but should use a venv; also DepoXy omits these:
#     python3-pip python3-setuptools python3-wheel
echoInstallHelp = echoInstallHelp 'os_linux' 'dxy_all'
install = install_os_specific
installLinux =
  pyenv_shell_unset
  #
  local venv_name=".venv-quicktile"
  if ! [ -d "${venv_name}" ]; then
    info "Creating venv..."
    python3 -m venv --system-site-packages "${venv_name}"
    #
    info "Activating venv..."
    . "${venv_name}/bin/activate"
    #
    (
      cd "${DOPP_KIT:-${HOME}/.kit}/py/virtualenvwrapper"
      #
      info "Installing virtualenvwrapper..."
      python3 -m pip install .
    )
    #
    info "Installing python-xlib..."
    python3 -m pip install python-xlib
  fi
  #
  local ambers_path="${DEPOXYDIR_BASE_FULL:-${HOME}/.depoxy}/ambers"
  local ambers_root="${DEPOXYAMBERS_DIR:-${ambers_path}}"
  #
  # # CXREF: ~/.kit/odd/quicktile/quicktile.sh
  # # symlink_overlay_file "${MR_REPO}/quicktile.sh" "${HOME}/.local/bin/quicktile.sh"
  # CXREF: ~/.depoxy/ambers/home/.kit/odd/quicktile/quicktile.sh
  symlink_overlay_file \
    "${ambers_root}/home/.kit/odd/quicktile/quicktile.sh" \
    "${HOME}/.local/bin/quicktile.sh"
  #
  # Install the service
  # CXREF: ~/.depoxy/ambers/home/.kit/odd/quicktile/quicktile.service
  cp "${ambers_root}/home/.kit/odd/quicktile/quicktile.service" \
    "${HOME}/.config/systemd/user/quicktile.service"
  systemctl --user daemon-reload
  systemctl --user enable quicktile.service
  systemctl --user start quicktile.service
  systemctl --user status quicktile.service
  #
  # CXREF: ~/.config/quicktile.cfg
  info "QuickTile installed, set to start and boot, and now running"
  #
  # USAGE: Called without args, `quicktile` silently exits immediately.
  # - Try:
  #     cd ~/.kit/odd/quicktile
  #     workon
  #     py3 -m quicktile --help
  #     py3 -m quicktile --show-bindings
  #     py3 -m quicktile --show-actions
  #     # Run the daemon
  #     py3 -m quicktile -d
  #     # Edit the config
  #     vim ~/.config/quicktile.cfg

# ========================================================================
# ------------------------------------------------------------------------

# Installs a VIA keyboard customizer command.
# - On @macOS, opens browser window to online app.
#   - CXREF: https://usevia.app/ TypeScript sources:
#       https://github.com/the-via/app
# - On @linux, web app won't connect, so using AppImage.
[${DOPP_KIT:-${HOME}/.kit}/odd/keyboard/via-nativia]
checkout = stub_checkout_directory
skip = no_travel
ffssh = OMR_TRAVEL_BLOCKLISTED=true git_merge_ffonly_ssh_mirror "$@"
echoInstallHelp = echoInstallHelp 'os_all' 'dxy_limit_maybe' \
  'for you mechanical keyboard lubbers' 'VIA'
install = install_os_specific
installDarwin =
  install_using_web_app () {
    # Use https://usevia.app/ on macOS
    local via_app_url="https://usevia.app/"
    #
    local app_name_local="sensible-open-usevia.app"
    #
    # If more browsers were supported, we could open user's preferred BROWSER:
    #   echo "sensible-open ${via_app_url}" > "${MR_REPO}/${app_name_local}"
    # But UseVia.app only runs on Chrome.
    echo "open -na \"Google Chrome\" --args --new-window \"${via_app_url}\"" \
      > "${MR_REPO}/${app_name_local}"
    #
    install_via_nativia "${app_name_local}"
  }
  install_using_dmg_image () {
    # CXREF: Find latest version:
    #   https://github.com/the-via/releases/releases
    #
    local via_version="3.0.0"
    #
    # E.g., https://github.com/the-via/releases/releases/download/v3.0.0/via-3.0.0-mac.dmg
    local app_image_base="https://github.com/the-via/releases/releases/download"
    # FIXME/2024-04-23 23:22: DRY: Only diff from installLinux is linux.AppImage vs. mac.dmg
    local app_image_url="${app_image_base}/v${via_version}/via-${via_version}-mac.dmg"
    #
    install_dmg_with_download_user_prompt_and_symlink \
      "${app_image_url}" "" "Via.app" "via-nativia"
  }
  # install_using_web_app
  install_using_dmg_image
installLinux =
  # CXREF: Find latest version:
  #   https://github.com/the-via/releases/releases
  #
  # local via_version="2.1.0"
  local via_version="3.0.0"
  #
  # E.g., https://github.com/the-via/releases/releases/download/v2.1.0/via-2.1.0-linux.AppImage
  local app_image_base="https://github.com/the-via/releases/releases/download"
  local app_image_url="${app_image_base}/v${via_version}/via-${via_version}-linux.AppImage"
  #
  local app_name_local="$(basename -- "${app_image_url}")"
  #
  if [ ! -f "${app_name_local}" ]; then
    wget "${app_image_url}"
  fi
  #
  install_via_nativia "${app_name_local}"
lib =
  install_via_nativia () {
    local app_name_local="$1"
    #
    chmod +x "${app_name_local}"
    #
    symlink_overlay_file "${MR_REPO}/${app_name_local}" "${HOME}/.local/bin/via-nativia"
    #
    # CXREF/2024-02-26: See DXY's udev rules copy:
    #   ~/.depoxy/ambers/etc/udev/rules.d/92-viia.rules
    local udevd_rules_path="etc/udev/rules.d/50-zsa.rules"
    #
    echo
    echo "BWARE: When you run \`via-nativia\` for the first time, it'll prompt"
    echo "       you to create a udev rule, and then for your admin password."
    echo
    echo "- You'll find the new rule at:"
    echo "    cat /etc/udev/rules.d/92-viia.rules"
    echo
    echo "- You could instead make the rule yourself:"
    echo "    sudo cp \\"
    echo "      \"${DEPOXYAMBERS_DIR:-${AMBERS_PATH}}/${udevd_rules_path}\" \\"
    echo "      \"/${udevd_rules_path}\""
    echo "    sudo chmod 644 /etc/udev/rules.d/92-viia.rules"
    # DUNNO/2024-02-26 23:15: I'm not sure if Via does this, but Wally does (my
    # user is already part of the group, and I have not inspected Via source).
    echo "  You might also need to add your user to the plugdev group:"
    echo "    sudo groupadd -f \"plugdev\""
    echo "    sudo usermod -aG \"plugdev\" \"$(id -un)\""
  }

# ========================================================================
# ------------------------------------------------------------------------

# ZSA Moonlander Mark I
# https://www.zsa.io/moonlander

# Wally — Keyboard firmware flash utility.
# - On the landing page
#     https://www.zsa.io/wally/
#   You'll find a download link
#     https://configure.zsa.io/wally/osx
#   Which redirects to the latest version, e.g.,
#     https://github.com/zsa/wally/releases/download/2.1.0-osx/wally-osx-2.1.0.dmg
#   As seen in the "Location:" line output from `wget https://configure.zsa.io/wally/osx`
# - You'll also find the same download assets on the GH release page:
#     https://github.com/zsa/wally/releases/
#   - Note that OS X, Linux, and Windows releases are released separately.
[${DOPP_KIT:-${HOME}/.kit}/odd/keyboard/wally]
checkout = stub_checkout_directory
skip = no_travel
ffssh = OMR_TRAVEL_BLOCKLISTED=true git_merge_ffonly_ssh_mirror "$@"
echoInstallHelp = echoInstallHelp 'os_all' 'dxy_limit_maybe' \
  'for you ZSA mechanical keyboard owners' 'Wally'
install = install_os_specific
installDarwin =
  local latest_wally_url_macos="https://configure.zsa.io/wally/osx"
  #
  # We could pin version, but can also download latest and somewhat easily
  # suss its version.
  # - The redirect line is, e.g.,
  #     Location: https://github.com/zsa/wally/releases/download/2.1.0-osx/wally-osx-2.1.0.dmg [following]
  local location="$(wget "${latest_wally_url_macos}" 2>&1 | grep "Location:" | head -1)"
  local vers_url="$(echo "${location}" | sed "s/^Location: \([^ ]\+\) \[following\]$/\1/")"
  # E.g., wally-osx-2.1.0.dmg
  local dmg_name="$(basename -- "${vers_url}")"
  #
  command mv -f -- "$(basename -- "${latest_wally_url_macos}")" "${dmg_name}"
  #
  # Alternatively, see `hdiutil attach <dmg>` for automated install,
  # but slower and requires sudo, so preferring manual intervention.
  #
  install_dmg_with_download_user_prompt_and_symlink \
    "" "${dmg_name}" "Wally.app" "wally"
installLinux =
  local latest_wally_url_debian="https://configure.ergodox-ez.com/wally/linux"
  #
  echo "Enter sudo password to install wally:"
  sudo -v
  #
  # Prereqs: gtk3 (should be installed, though not sure specifically what
  # the Aptitude package name is); webkit2gtk (possibly specifically
  # libwebkit2gtk-4.0-dev), and libusb.
  sudo apt install -y libusb-1.0-0-dev
  #
  local udevd_rules_path="etc/udev/rules.d/50-zsa.rules"
  sudo /usr/bin/env cp -f -- \
    "${DEPOXYAMBERS_DIR:-${AMBERS_PATH}}/${udevd_rules_path}" \
    "/${udevd_rules_path}"
  #
  # Ensure user is part of plugdev group.
  sudo groupadd -f "plugdev"
  # Note that [ $(id -un) = ${USER} ]
  sudo usermod -aG "plugdev" "$(id -un)"
  #
  # We could just call the download `wally` (its default name), but for
  # version readability, we'll add the version to its name.
  # - The wget Location lines look like this:
  #       Location: https://configure.zsa.io/wally/linux [following]
  #     * Location: https://github.com/zsa/wally/releases/download/2.1.3-linux/wally [following]
  #       Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/...
  # SAVVY/2024-02-26: The wget download is named simply "linux".
  echo "Downloading latest release..."
  # SAVVY/2024-02-26: I no longer see the first Location, so this doesn't work:
  #     local location="$( \
  #       wget "${latest_wally_url_debian}" 2>&1 | grep "Location:" | head -2 | tail -1
  #     )"
  # - So look for the GH addy instead, e.g.:
  #     Location: https://github.com/zsa/wally/releases/download/2.1.3-linux/wally
  local location="$( \
    wget "${latest_wally_url_debian}" 2>&1 \
    | grep "Location: https://github.com/zsa/wally/releases/download/"
  )"
  # vers_url is * Location, above, with prefix and suffix stripped.
  local vers_url="$(echo "${location}" | sed "s/^Location: \([^ ]\+\) \[following\]$/\1/")"
  # Make the app_name, e.g., "wally-2.1.3-linux".
  local url_name="$(basename -- "${vers_url}")"
  local app_vers="$(basename -- "$(dirname -- "${vers_url}")")"
  local app_name="${url_name}-${app_vers}"
  #
  echo "- location: ${location}"
  echo "- vers_url: ${vers_url}"
  echo "- url_name: ${url_name}"
  echo "- app_vers: ${app_vers}"
  #
  command mv -- "$(basename -- "${latest_wally_url_debian}")" "${app_name}"
  chmod +x "${app_name}"
  ln -sf "${MR_REPO}/${app_name}" "${HOME}/.local/bin/${url_name}"
  #
  echo
  echo "Wally is now installed. You can run it thusly:"
  echo
  echo "  ${url_name}"
  echo
  echo "YOU: You may need to logoff or reboot to realize ZSA udev rules"

# ========================================================================
# ------------------------------------------------------------------------

