# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=bash
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/DepoXy/depoxy#üçØ
# License: MIT

# ========================================================================
# ------------------------------------------------------------------------

[DEFAULT]
order = 690

# ========================================================================
# ------------------------------------------------------------------------

[${GITREPOSPATH:-${HOME}/.kit/git}/git]
lib = MR_REPO_REMOTES="starter https://github.com/git/git.git"
skip = mr_exclusive "kit" "git" "kit-git"
# REFER: https://github.com/git/git/blob/master/Documentation/SubmittingPatches
# - Git uses four branches: maint > master > next > seen
#   - 'master' is more bleeding edge, but it has same version tags as
#     'maint', from what I see. And 'next' and 'seen' are like the author's
#     'liminal' branches, a collection of feature branches that is often
#     rebased and force-pushed.
install = install_os_specific
# MAYBE/2021-05-30: Add Darwin support. See at least `package` list below.
installDarwin = false
installLinux =
  # Update to the latest version.
  pull_latest "starter" "master"
  #
  # Install packages necessary to build the app.
  # - For `make all`: libssl-dev
  # - For `make doc`: asciidoc xmlto
  for package in \
    asciidoc \
    docbook2x \
    libssl-dev \
    xmlto \
  ; do
    if ! dpkg -l "${package}" | tail -1 | grep -q "^ii"; then
      echo "RAISE: You need to install ${package} first:"
      echo "  sudo apt-get -y install ${package}"
      sudo apt-get -y install ${package}
    fi
  done
  #
  make clean
  make configure
  ./configure --prefix=${HOME}/.local
  make prefix="${HOME}/.local" all doc info
  make prefix="${HOME}/.local" install install-doc install-html install-info
  # SCALE/2024-02-17: `make clean` reduces disk usage from 678M to 379M (v2.44.0-rc1).
  make clean
  #
  echo
  echo "RUNME: To use the new app in open terminals, reset the hash environment:"
  echo "  hash -r"
  #
  # HSTRY/2024-02-17: On previous builds, I saw un-ignored build files,
  # but I haven't seen them recently:
  #
  # - 2023-12-19: I didn't see this file today, Git 2.43.0.rc2,
  #   but I (maybe) saw it last version I built, 1 year ago, Git 2.38.1:
  #   - You might see a stray 'git-rebase--preserve-merges' file. /I did/
  #   - You can delete it. It's already installed locally:
  #       diff -q \
  #         ~/.local/libexec/git-core/git-rebase--preserve-merges \
  #         ${MR_REPO}/git-rebase--preserve-merges" \
  #         && command rm git-rebase--preserve-merges
  #
  # - 2021-05-30: Un-ignored files from today's build:
  #     $ git st
  #     ?? git-parse-remote
  #     ?? git-remote-testsvn
  #     ?? t/helper/test-line-buffer
  #     ?? t/helper/test-svn-fe
  #     $ command rm \
  #         git-parse-remote \
  #         git-remote-testsvn \
  #         t/helper/test-line-buffer \
  #         t/helper/test-svn-fe
  #   - Odd that Git would generate build files that are not ignored.
  #   - 2021-09-20: I don't these files with v2.33.0, and `st` is tidy.

# ========================================================================
# ------------------------------------------------------------------------

# 2021-05-30: I normally pull Git commands or aliases from other people's
# projects into git-smart, but this project has a number of unique useful
# commands, so pulling it all in.
[${GITREPOSPATH:-${HOME}/.kit/git}/git-extras]
lib = MR_REPO_REMOTES="starter https://github.com/tj/git-extras.git"
skip = mr_exclusive "kit" "git" "kit-git"
install =
  git checkout master
  git branch -u starter/master
  git fetch starter --prune
  git merge --ff-only
  #
  # Make and place man pages.
  # - Prereq.: Requires `ronn`: "tool to build manuals from Markdown".
  # FIXME/2024-02-18 01:21: Make OMR lib fcn. for this?
  for package in ronn; do
    if ! dpkg -l "${package}" | tail -1 | grep -q "^ii"; then
      echo "RAISE: You need to install ${package} first:"
      echo "  sudo apt-get -y install ${package}"
      sudo apt-get -y install ${package}
    fi
  done
  #
  git branch -D tip/rename-commands-that-conflict-with-git-smart-commands || true
  git checkout -b tip/rename-commands-that-conflict-with-git-smart-commands \
    --track starter/master
  #
  # Move conflicts outta the way.
  git mv "bin/git-abort" "bin/git-extras-abort"
  git mv "bin/git-pr" "bin/git-extras-pr"
  git mv "bin/git-undo" "bin/git-extras-undo"
  #
  git commit -m "PRIVATE: Rename commands that conflict with git-smart commands"
  #
  # See the `make install` task.
  # - The bin path is wired manually to PATH, via
  #     ~/.depoxy/ambers/core/pathanova.sh
  #   so just make the docs and install them.
  #
  git mv "man/git-abort.md" "man/git-extras-abort.md"
  git mv "man/git-pr.md" "man/git-extras-pr.md"
  git mv "man/git-undo.md" "man/git-extras-undo.md"
  #
  git commit -m "PRIVATE: Rename docs for renamed commands"
  #
  # Note that docs are committed to the repo, so clean them first.
  # - Also note that the latest commit (7.1.0) doesn't have the latest
  #   docs committed, but `make docs` won't run unless cleaned first.
  make clean
  make docs
  #
  git add .
  git commit -m "PRIVATE: Build docs"
  #
  # Note: FreeBSD uses ~/.local/man/man1
  local man1_dir="${HOME}/.local/share/man/man1"
  if os_is_macos; then
    man1_dir="${HOME}/.local/man/man1"
  fi
  mkdir -p "${man1_dir}"
  debug "/bin/cp -f man/git-*.1 \"${man1_dir}\""
  /bin/cp -f man/git-*.1 "${man1_dir}"
  #
  # Wire the completions file (Homefries-specific).
  if [ -d "${HOMEFRIES_DIR:-${HOME}/.homefries}/bin/completions" ]; then
    cd "${HOMEFRIES_DIR:-${HOME}/.homefries}/bin/completions"
    symlink_overlay_file "${MR_REPO}/etc/bash_completion.sh" "git-extras-bash_completion.sh"
  fi

# ========================================================================
# ------------------------------------------------------------------------

# FIXME/2021-08-19: Not yet tested on @macOS (works on @linux).
# Git history rewriter (filter-branch/BFG/git-obliterate replacement).
# CXREF: https://github.com/newren/git-filter-repo
[${GITREPOSPATH:-${HOME}/.kit/git}/git-filter-repo]
lib = MR_REPO_REMOTES="starter https://github.com/newren/git-filter-repo.git"
skip = mr_exclusive "kit" "git" "kit-git"
infuse =
  symlink_overlay_file \
    "${GITREPOSPATH:-${HOME}/.kit/git}/git-filter-repo/git-filter-repo" \
    "${HOME}/.local/bin/git-filter-repo"
update = git pull --ff-only

# ========================================================================
# ------------------------------------------------------------------------

# git-heads -- "show branches without any child commits with `git-log`(1)"
#   https://github.com/seschwar/git-heads.git
# SAVVY/2024-02-18: Not updated since 2010-10-11.
[${GITREPOSPATH:-${HOME}/.kit/git}/git-heads]
lib = MR_REPO_REMOTES="starter https://github.com/seschwar/git-heads.git"

# ========================================================================
# ------------------------------------------------------------------------

# CXREF/2024-02-17: I used to use git-interactive-rebase-tool,
# but then I plumbed rebase into tig, which I find easier and
# quicker to use:
#   https://github.com/DepoXy/tig-newtons#üçé

# https://github.com/MitMaro/git-interactive-rebase-tool
# See also:
# - Node clone: https://github.com/sjurba/rebase-editor
[${GITREPOSPATH:-${HOME}/.kit/git}/git-interactive-rebase-tool]
lib = MR_REPO_REMOTES="starter https://github.com/MitMaro/git-interactive-rebase-tool.git"
skip = mr_exclusive "kit" "git" "kit-git"
infuse =
  link_private_exclude "$@"
  link_private_ignore_ "$@"
install = install_os_specific
# 2021-06-01: Both Brew and sources are at v2.1.0. I think maintainers update
# Brew when tagging new versions, so no need to worry about falling behind.
installDarwin =
  if [ -e "/opt/homebrew/bin/interactive-rebase-tool" ]; then
    # $ /opt/homebrew/bin/interactive-rebase-tool --version
    # interactive-rebase-tool 2.2.1 (2022-10-14)
    echo "git-interactive-rebase-tool is already installed"
    /opt/homebrew/bin/interactive-rebase-tool --version
  else
    echo "Installing git-interactive-rebase-tool from Homebrew"
  fi
  brew install git-interactive-rebase-tool
installLinux =
  # Requires Rust!
  #   https://www.rust-lang.org/tools/install
  # See installation instructions and a nifty on-demand (JIT) lazy-loader:
  #   https://github.com/landonb/home-fries/blob/release/lib/rust_util.sh
  #     ~/.homefries/lib/rust_util.sh
  #
  # We could build and use the tool immediately, but it's a little more
  # tedious: you have to point it at the rebase todo file:
  #   cargo build --release
  #   # build and run
  #   cargo run -- <path-to-git-rebase-todo-file>
  # So make the Debian package instead:
  #   cargo deb
  #
  # Note that blank lines break myrepos parsing, so we use comment
  # characters for holding line breaks.
  #
  # INERT/2024-02-18: I use tig-newtons to rebase, otherwise I'd automate this.
  cat <<'#EOF'
    *** Install git-interactive-rebase-tool
    #
    These instructions are current as of 2023-01-09 v2.2.1.
    #
    Install Rust [https://www.rust-lang.org/tools/install]:
    #
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    #
    Or update Rust (and cargo):
    #
      rustup update
    #
    Prepare the current shell:
    #
      . "${HOME}/.cargo/env"
    #
    Install release build dependencies:
    #
      sudo apt install pkg-config liblzma-dev
      cargo install --force cargo-make
      cargo install cargo-deb
    #
    Build the tool:
    #
      cd "${MR_REPO}"
      cargo make build --release
      # 2023-01-09: README.md says `cargo made deb`
      # but cargo-make retorts "Task deb not found".
      cargo deb
    #
    Install the package:
    #
      version=$(grep -e "^version =" Cargo.toml \
        | sed "s/^version = [\"']\?\([^\"']*\)[\"']\?$/\1/")
    #
      # E.g.,
      #  sudo dpkg -i target/debian/git-interactive-rebase-tool_2.2.1_amd64.deb
      sudo dpkg -i target/debian/git-interactive-rebase-tool_${version}_amd64.deb
    #
 #EOF
#EOF
#‚Üë‚Üë‚Üë So ft=bash stops highlighting the Heredoc.

# ========================================================================
# ------------------------------------------------------------------------

# 2020-01-17: Like `cloc`, but for git code authors.
[${GITREPOSPATH:-${HOME}/.kit/git}/git-quick-stats]
lib = MR_REPO_REMOTES="starter https://github.com/arzzen/git-quick-stats.git"
skip = mr_exclusive "kit" "git" "kit-git"
infuse =
  symlink_overlay_file \
    "${GITREPOSPATH:-${HOME}/.kit/git}/git-quick-stats/git-quick-stats" \
    "${HOME}/.local/bin/git-quick-stats"
update = git pull --ff-only

# ========================================================================
# ------------------------------------------------------------------------

# NOTED/2021-01-30: These are both Go projects, but they feel more at home
# here than in a ~/.depoxy/ambers/home/.kit/go/_mrconfig file.

# SAVVY/2021-01-30: Both `hub` and `gh` sometimes require a token, e.g.,
#   GITHUB_TOKEN=<tok> hub / GITHUB_TOKEN=<tok> gh / GH_TOKEN=<tok> gh
# - MAYBE: We could add a `grip`-like wrapper that reads it from `pass`.
#   - But I don't have a use case for it yet.

[${GITREPOSPATH:-${HOME}/.kit/git}/hub]
# NOTE: README suggests additional clone args., e.g.,:
#   git clone \
#     --config transfer.fsckobjects=false \
#     --config receive.fsckobjects=false \
#     --config fetch.fsckobjects=false \
#     https://github.com/github/hub.git
# - But per `man git-config`, these all default 'false' already.
lib = MR_REPO_REMOTES="starter https://github.com/github/hub.git"
skip = mr_exclusive "kit" "git" "kit-git"
install =
  git pull --ff-only
  make install prefix="${HOME}/.local"

# 2021-01-30: The `hub` competitor, the "official" 'cli'. Er, `gh`.
[${GITREPOSPATH:-${HOME}/.kit/git}/cli]
lib = MR_REPO_REMOTES="starter https://github.com/cli/cli.git"
skip = mr_exclusive "kit" "git" "kit-git"
# Build requires Go 1.13+.
install =
  git pull --ff-only
  make install prefix="${HOME}/.local"

# ========================================================================
# ------------------------------------------------------------------------

# SLUGL: myrepos fork for ohmyrepos
[${GITREPOSPATH:-${HOME}/.kit/git}/myrepos]
order = 470
# Note that 'checkout' on this project is pretty much impossible: You can't clone the cloner!
# - Well, not unless you previously cloned it elsewhere and can run it.
# - At least you can still run `wireRemotes`, though.
lib = MR_REPO_REMOTES="
  publish https://github.com/landonb/myrepos.git
  starter git://myrepos.branchable.com/
  "
skip = mr_exclusive "kit" "git" "kit-git"
infuse =
  infuser_prepare "${GITREPOSPATH:-${HOME}/.kit/git}/myrepos" "${@}"
  symlink_overlay_file "${GITREPOSPATH:-${HOME}/.kit/git}/myrepos/mr" "${HOME}/.local/bin/mr"
# DEBAR: There's no 'install' or 'update' action because myrepos doesn't
# budge much, and the landonb/myrepos fork is a versioned TIP. So we want
# to be deliberate about merging upstream changes (and to avoid requiring
# landonb/myrepos users to `reset --hard` to fetch our changes).

# HINT: Debug myrepos:
#
#   /usr/bin/env perl -d ~/.local/bin/mr ls

# ========================================================================
# ------------------------------------------------------------------------

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
#  Oh, My Repos! (The app that uses this file, hello!)

# SLUGL: Oh, My Repos! supercharged `myrepos` multiple repository management
[${OHMYREPOS_DIR:-${GITREPOSPATH:-${HOME}/.kit/git}/ohmyrepos}]
order = 150
lib = MR_REPO_REMOTES="publish https://github.com/landonb/ohmyrepos.git"
skip = mr_exclusive "kit" "git" "kit-git"
infusePostRebase =
  link_hard_dep_sh_logger_and_colors
  link_hard_dep_sh_print_nanos_now
infuse =
  mr -d . -n infusePostRebase
  #
  link_private_exclude "$@"
  link_private_ignore_ "$@"
  #
  # FIXME/2023-01-15: Missing infuse task for open patch:
  #   ohmyrepos/lib/js-npm-patch-opn-sensible-open
updateDeps = update_deps_shoilerplate

# ========================================================================
# ------------------------------------------------------------------------

# 2020-11-21: Loving it!
#                  G IT
#                  T IG
#                   TIG!
[${GITREPOSPATH:-${HOME}/.kit/git}/tig]
lib = MR_REPO_REMOTES="starter https://github.com/jonas/tig.git"
# 2021-08-04: Old remote wiring in case I need to fork tig again.
#
#  lib = MR_REPO_REMOTES="
#    publish https://github.com/landonb/tig.git
#    starter https://github.com/jonas/tig.git"
#    "
skip = mr_exclusive "kit" "git" "kit-git"
install = install_os_specific
# Prefer Homebrew tig on macOS, which is generally up to date, otherwise
# you need a slightly more complicated installer (and need to install
# prerequisites).
# - SAVVY/2023-02-12: I don't always keep my Linux Mint current,
#   e.g., Linux Mint 19.3 installs tig 2.3.0, but 2.5.3 is latest
#   (and has features I want). So add 'install' action.
# - MAYBE/2024-02-09: I might start hacking on tig, in which case
#   I'll want to figure out the macOS build. So separate installs.
installDarwin = false
installLinux =
  git fetch --prune starter
  git merge --ff-only
  # Ensure deps available.
  # - SAVVY: Stack Overflowers suggest you cannot determine the
  #   shared library path easily (e.g., /usr/lib/x86_64-linux-gnu).
  #   - You could parse /etc/ld.so.conf but on, e.b., Linux Mint 19.3,
  #     that includes /etc/ld.so.conf.d/*.conf which itself contains
  #     four more files that each specify one or more paths.
  #   - So we'll just hardcode it (which, not to worry, that path
  #     has remained the same for eons (at least since Mint 16)).
  # - SAVVY: Use `dpkg -L <pkg>` to see what <paths> <pkg> installs; or
  #          use `dpkg -S <path>` to see what <pkg> installs <path>.
  #          - That's how I determined the tests for this if-clause;
  #            and that's how I determined the package names to
  #            install for some of the non-obvious dependencies.
  #
  # Suss the perl lib path, e.g.,
  # - Ubuntu 20.04/Mint 19.3: /usr/lib/x86_64-linux-gnu/perl5/5.26
  # - Ubuntu 22.04/Mint 21.1: /usr/lib/x86_64-linux-gnu/perl5/5.34
  perl_lib_path=$(
    for path in $(perl -e "print qq(@INC)"); do
      echo $path
    done | sed '\#/usr/lib/x86_64-linux-gnu/perl5/#!d'
  )
  #
  if false \
    || [ ! -f "/usr/lib/x86_64-linux-gnu/libssl.so" ] \
    || [ ! -f "/usr/lib/x86_64-linux-gnu/libncursesw.so" ] \
    || [ ! -f "${perl_lib_path}/auto/Text/Iconv/Iconv.so" ] \
    || [ ! -f "/usr/lib/x86_64-linux-gnu/libreadline.so" ] \
    || ! command -v pcregrep > /dev/null \
    || ! command -v autoconf > /dev/null \
    || ! command -v asciidoc > /dev/null \
    || ! command -v xmlto > /dev/null \
    || [ ! -f "/usr/share/xml/docbook/stylesheet/docbook-xsl/VERSION" ] \
  ; then
    local pkgs=""
    pkgs="${pkgs} libssl-dev"         # for `make all`
    pkgs="${pkgs} libncursesw5-dev"   # but ncursesw for wide char supp (UTF-8)
    # Not sure if this is the package the tig INSTALL doc means, but this
    # is what I see installed on my machine, and install tig + docs works.
    pkgs="${pkgs} libtext-iconv-perl" # "If iconv is not provided by the c library you need to change
                                      #  the Makefile to link it into the binary"
    # Optional:
    pkgs="${pkgs} libreadline-dev"    # readline  # completion and history
    # Not sure which PCRE package it is:
    #   libpcre16-3 libpcre3 libpcre3:i386 libpcre3-dev libpcre32-3 libpcrecpp0v5 pcregrep
    # - We'll just assume its the package that installs the executable.
    pkgs="${pkgs} pcregrep"           # PCRE  # Perl Compat. Reg. Expressions, for searches...
    pkgs="${pkgs} autoconf"           # generates configure
    pkgs="${pkgs} asciidoc"           # generates HTML and (DocBook) XML from text
    pkgs="${pkgs} xmlto"              # generates manpages
    pkgs="${pkgs} docbook-xsl"        # DocBook SXL  # used by xmlto
                                      # DocBook (DSSL/Jade) tools  # gen's XML ‚Üí PDF  [for why?]
    sudo apt install -y ${pkgs}
  fi
  #
  make clean
  make configure
  ./configure
  make prefix=${HOME}/.local
  make install prefix=${HOME}/.local
  make install-doc prefix=${HOME}/.local

# ========================================================================
# ------------------------------------------------------------------------

