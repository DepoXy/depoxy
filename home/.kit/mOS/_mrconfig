# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=bash
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/DepoXy/depoxy#üçØ
# License: MIT

[DEFAULT]
order = 761

# ========================================================================
# ------------------------------------------------------------------------

# SAVVY: Some projects below are not installed on @Linux hosts.
#
# - Look for the skip:
#
#     skip = ! os_is_macos
#
# - These projects also need to disable the travel mechanism:
#
#     ffssh = true
#     travel = true
#     unpack = true
#
#   - This is because @Linux hosts might not have these projects cloned.
#
# - Note this is a janky kludge. A better solution would be something
#   like `ffssh = ! remote_is_macos`, but the author has no intention
#   of adding something like that; or maybe even something more generic,
#   like, `ffssh = ffssh_allow_missing_remote`, where the config
#   indicates not to complain (too loudy) if the remote repo is absent.

# ========================================================================
# ------------------------------------------------------------------------

# https://github.com/johnste/finicky
[${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/finicky]
checkout = stub_checkout_directory
skip = ! os_is_macos
# KLUGE: So @macOS doesn't try to fetch from @Linux host.
ffssh = true
travel = true
unpack = true
#
echoInstallHelp =
  echo "$(echoInstallHelpWidget 'os_macos' 'dxy_all') DepoXy: Verify *Finicky* ready::
    mr -d \"${MR_REPO}\" -n infuse
 "
# CXREF: ~/.homefries/lib/distro/default-browser.sh
isInstalled =
  test "net.kassett.finicky" = \
    "$(/usr/bin/env bash "${HOME}/.homefries/lib/distro/default-browser.sh")"
install = install_os_specific
installDarwin =
  #
  # Guard clause.
  # - HUH: Cannot simply source default-browser.sh and call default-browser
  #        because shell OMR uses does not allow train-case function names,
  #        didn't realize that wasn't POSIX'y. So run via Bash.
  mr -d "${MR_REPO}" -n isInstalled && return 0
  #
  warn "Finicky is not the default browser."
  warn "- Run *Finicky* once to set as default browser:"
  warn "    open /Applications/Finicky.app/"
  warn "  - Click notification drop-down and choose *Allow*."
  warn "- ALTLY:"
  warn "  Systems Settings... > Desktop & Dock > Default web browser: *üëá Finicky.app*"
  #
  exit 1

# ========================================================================
# ------------------------------------------------------------------------

# https://www.tynsoe.org/geektool/
[${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/GeekTool]
checkout = stub_checkout_directory
skip = ! os_is_macos
# KLUGE: So @macOS doesn't try to fetch from @Linux host.
ffssh = true
travel = true
unpack = true
#
echoInstallHelp =
  echoInstallHelp 'os_macos' 'dxy_all'
  #
  echo "$(echoInstallHelpWidget 'os_macos' 'dxy_all') Configure GeekTool:
    GeekTool > ‚úì Automatically launch at login
 "
  #
  echo "$(echoInstallHelpWidget 'os_macos' 'dxy_all') Configure GeekTool:
    GeekTool > Check for updates: ‚úì Automatic
 "
  #
  echo "$(echoInstallHelpWidget 'os_macos' 'dxy_all') DepoXy: Create GeekTool *geeklets*:
    - Create 2 *Shell* geeklets, one to stand in for the menu bar clock
      when the menu bar is hidden, and another centered on the desktop:
  
      - Name: MENU_DATE | CTRD_DATE
  
      - Command::
  
           date '+%a %Y-%m-%d %H:%M'
  
      - Refresh every: 1 s.
  
      - Font and style:
        - MENU_DATE: Font: *Skia* 18pt White. Should fit under auto-hiding menu bar.
          - Or maybe light gray, e.g., #D9D9D9.
          - To set, click where it says *Click here to set font & color...*.
          - To set hex, click the color square, then click the Sliders icon,
            then choose *RGB Sliders* from the dropdown.
        - CTRD_DATE: Font: *Herculanum* 36pt mid-Green, #007F00.
        - I set text center-aligned, and then positioned the window.
           - I tried right-aligned, but even with spaces at the end, the last
             character from the clock was clipped by the *GeekTool* window.
  
      - Setup: MENU_DATE: Position upper-right, where macOS menubar clock appears when showing.
  
      - Setup: CTRD_DATE: You wanna know the time but can't see it.
        - The geeklet lets you show-desktop, read time, and un-show desktop to resume work.
        - Configure similarly to menu bar clock, but center this widget on the desktop,
          so that you can see if when you look straight ahead.
  
    - SAVVY: You can Ctrl-Alt-D show-desktop to more easily move geeklet widgets around.
  
    - SAVVY: Use the eyedropper to match the second widget font color to the first widget.
  
    - SAVVY: On Quit, choose \"No, Never Ask\" when asked if GeekTool should disable itself.
  
    - BWARE: I think GeekTool geeklets disappear after OS update (at least hours after
             updating 14.4.1 -> 14.5 author notices geeklets are missing)
 "
isInstalled = test -d "${HOME}/Applications/GeekTool.app"
install = install_os_specific
installDarwin =
  # REFER/2024-04-24: Still the latest (for last year at least):
  #   https://dl.devmate.com/org.tynsoe.GeekTool/331.014/1470733752/GeekTool-331.014.zip
  local geektool_vers="331.014"
  local dist_root="1470733752"
  #
  echo "Installing GeekTool:"
  echo "- Version: ${geektool_vers}"
  echo
  echo "STEPS: Update GeekTool to latest version as appropriate"
  echo "- Visit:"
  echo
  echo "    https://www.tynsoe.org/geektool/"
  echo
  #
  local geektool_base="GeekTool-${geektool_vers}"
  #
  wget "https://dl.devmate.com/org.tynsoe.GeekTool/${geektool_vers}/${dist_root}/${geektool_base}.zip"
  unzip -q -d "${geektool_base}" "${geektool_base}.zip"
  command mv -- "${geektool_base}/GeekTool.app/" "${HOME}/Applications/"
  rmdir -- "${geektool_base}"
  echo "GeekTool copied to ~/Applications"
  echo "... please wait a few seconds until Spotlight knows it."

# ========================================================================
# ------------------------------------------------------------------------

[${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/homebrew-autoupdate]
# Use 'origin' remote specifically, otherwise:
#   $ brew install some-app
#   Warning: No remote 'origin' in /opt/homebrew/Library/Taps/homebrew/homebrew-autoupdate, skipping update!
#   Running `brew update --auto-update`...
# - Or maybe that has nothing to do with this repo...
lib =
  remote_set origin https://github.com/landonb/homebrew-autoupdate.git
  remote_set starter https://github.com/Homebrew/homebrew-autoupdate.git
echoInstallHelp =
  echoInstallHelp 'os_macos' 'dxy_all'
  #
  # DUNNO/2024-04-23: Not sure in macOS Sonoma 14.4.1 if we need to allow
  # notifications, but I don't see brew-autoupdate at
  #   Systems Settings... > Notifications > Application Notifications
  # - HSRTY: On previous macOS, you could find the setting here:
  #   echo "$(echoInstallHelpWidget 'os_macos' 'dxy_all') DepoXy: Configure \`homebrew-autoupdate\`:
  #     System Preferences... > Notifications & Focus > Notifications > *brew-autoupdate*: ‚úì Allow Notifications
  #   "
update =
  git fetch --all --prune
  #
  git checkout landonb--custom--call-omr-infuse-after-update
  #
  git branch -u starter/master
  git pull -r
isInstalled =
  brew autoupdate status 2>/dev/null \
    | head -n 1 \
    | grep -q -e "^Autoupdate is installed and running.$"
install = install_os_specific
installDarwin =
  # OMR/lib already on PATH, but explicit is descriptive.
  . "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/print-homebrew-prefix.sh"
  local inject_path
  # Side-effect: Triggers errexit if print_homebrew_prefix cannot suss.
  inject_path="$(print_homebrew_prefix)/Library/Taps/homebrew/homebrew-autoupdate"
  # The `brew autoupdate` command uses Homebrew's `cli/parser` Ruby library
  # to run as external command. It works like git-foo commands: name the
  # executable with the `brew-` prefix, and stick it on path.
  symlink_overlay_dir "${DOPP_KIT:-${HOME}/.kit}/mOS/homebrew-autoupdate" "${inject_path}"
  #
  # USAGE: brew autoupdate <subcommand> [<interval>] [<options>]
  # HELP: brew autoupdate.rb --help
  # ASSETS: ll ~/Library/Application\ Support/com.github.domt4.homebrew-autoupdate/
  #       (after first run)
  # Run immediately: brew autoupdate
  # Runs via: launchctl
  #       launchctl list | grep com.github.domt4.homebrew-autoupdate
  # STOP: brew autoupdate delete
  #
  # FIXME/2021-08-04: Is this sticky across reboots?
  #
  brew autoupdate start 86400 --upgrade
# FIXME/2022-12-04: Will this affect me? [sic]:
#   Warning: Please note if you use Casks that require `sudo` to upgrade there
#   are known issues with that use case and this command unless using
#   `SUDO_ASKPASS`.
#
#     https://github.com/Homebrew/homebrew-autoupdate/issues/40
#
#   Homebrew will now automatically update every 24 hours, or on system boot.

# WARNING:  You don't have /Users/user/.gem/ruby/2.6.0/bin in your PATH,
#   gem executables will not run.

# ========================================================================
# ------------------------------------------------------------------------

# *** Keybinding-related.

# ========================================================================
# ------------------------------------------------------------------------

[${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/Karabiner-Elements]
lib = remote_set starter https://github.com/pqrs-org/Karabiner-Elements.git
# Skip on @Linux except to 'checkout' (make stub directory).
checkout = os_is_macos && mr_repo_checkout || stub_checkout_directory
skip = ! os_is_macos && ! test "${MR_ACTION}" = "checkout"
# KLUGE: So @macOS doesn't try to fetch from @Linux host.
ffssh = true
travel = true
unpack = true

# ***

# working üêò for peanuts
# Linux-like macOS keybindings üêò
# https://github.com/DepoXy/Karabiner-Elephants#üêò
[${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/Karabiner-Elephants]
lib = remote_set publish https://github.com/DepoXy/Karabiner-Elephants.git

# ***

# Old school magical file (magically undocumented).
[${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/DefaultKeybindings.dict]
lib = remote_set starter "https://github.com/ttscoff/KeyBindings.git" "DefaultKeybindings.dict"
# Skip on @Linux except to 'checkout' (make stub directory).
checkout = os_is_macos && mr_repo_checkout || stub_checkout_directory
skip = ! os_is_macos && ! test "${MR_ACTION}" = "checkout"
# KLUGE: So @macOS doesn't try to fetch from @Linux host.
ffssh = true
travel = true
unpack = true

# ========================================================================
# ------------------------------------------------------------------------

# ‚ÄúIt‚Äôs a turn, not a religion‚Äù
# Opinionated `brew install` and `defaults` commands üèÇ
# https://github.com/DepoXy/macOS-onboarder#üèÇ
[${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/macOS-onboarder]
lib = remote_set publish https://github.com/DepoXy/macOS-onboarder.git

# ========================================================================
# ------------------------------------------------------------------------

