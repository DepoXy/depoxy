# vim:tw=0:ts=2:sw=2:et:norl:ft=conf
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/DepoXy/depoxy#üçØ
# License: MIT

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# *** git-put-wise commands

# Below are bindings for the four main GPW commands:
#
#   apply/archive/pull/push
#
# Plus an extra binding for force-push.
#
# Also the
#
#   git-rebase-sort-by-scope-protected-private
#
# command, with and without gpg-signing.

# *** gut-bump-version-tag command

# And we'll throw in a `git bump` binding, too.

# *** WIP commits and post-rebase exec

# Note that none of the binding wrappers manage WIP commits, nor
# process the optional post-rebase user hook, GIT_POST_REBASE_EXEC.
#
# - git-put-wise, git-rebase-sort-by-scope, and git-bump each
#   handle all of this.
#
# Those commands will also kill `tig` for us on error, using the $PPID
# passed in, so the user gets dumped from tig to the console on error.

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

bind generic <C-a> >sh -c " \
  git_put_wise__archive_____________________ () { \
    PW_PID_KILL_ON_ERROR=$PPID \
      git put-wise archive; \
    echo; \
  }; git_put_wise__archive_____________________"

# MAYBE/2023-01-17: Just call 'pw out'?
# - Sorta want to verify how client works:
#   - If not special branch, does it always default push (and skip archive)?
#   - If special branch, does it check is-client environ and then archive?
#   - For @home, does it check is-client and then always push unless there
#     is no 'publish' or 'entrust' or 'origin' remote? (I.e., ignore local
#     machine remotes -- so you could maybe parse remotes for .com/TLD and
#     assume if just a hostname, then it's not a push remote and to use
#     archive instead.)

# 2023-01-17: Nice, how fortunate both C-a and C-s are available,
# at least for now, though I might consolidate with a `pw out` call.
bind generic <C-s> >sh -c " \
  git_put_wise__push________________________ () { \
    PW_PID_KILL_ON_ERROR=$PPID \
      git put-wise push; \
    echo; \
  }; git_put_wise__push________________________"

# Ctrl-f, for reals...
bind generic <C-f> >sh -c " \
  git_put_wise__push__force_________________ () { \
    PW_PID_KILL_ON_ERROR=$PPID \
      git put-wise push -f; \
    echo; \
  }; git_put_wise__push__force_________________"

# MEH/2023-01-18: Ctrl-v and Ctrl-b are a few of still available bindings...
# - I'd rather not use <C-v> (it's paste!) but also you'll get used to it.
bind generic <C-v> >sh -c " \
  git_put_wise__pull________________________ () { \
    PW_PID_KILL_ON_ERROR=$PPID \
      git put-wise pull; \
    echo; \
  }; git_put_wise__pull________________________"

bind generic <C-b> >sh -c " \
  git_put_wise__apply_______________________ () { \
    PW_PID_KILL_ON_ERROR=$PPID \
      git put-wise apply; \
    echo; \
  }; git_put_wise__apply_______________________"

# ***

# Built-in bindings I don't use, that I steal:
# - '$' toggles commit-title-overflow, which colors in red characters
#   in commit title after some number of characters (defaults 50). I
#   have no idea the purpose, maybe to encourage oneself to write
#   shorter commit message titles?
#     '$' -> :set main-view-commit-title-overflow = [no|50]
# - '%' toggles the file-filter "in order to see the full diff instead
#   of only the diff concerning the currently selected file" except
#   when I demo the option, I don't see anything change.
#     '%' -> :set file-filter [no|yes]
# Here we "steal" % for resorting scoped commits.
# - Note that "000..." is %(commit) for Unstaged and Staged changes.
#   - Replace with HEAD; and along with magic_starting_ref=true tells
#     git sort-by-scope to rebase since latest "published" commit, e.g.,
#     upstream branch or pw/in tag marker.

bind generic % >sh -c " \
  git_sort_by_scope__rebase_________________ () { \
    local starting_ref=\"%(commit)\"; \
    \
    PW_PID_KILL_ON_ERROR=$PPID \
      git rebase-sort-by-scope-protected-private \
        \"${starting_ref}\" \
        \"${_magic_starting_ref:-true}\" \
        \"${_enable_gpg_sign:-false}\" \
        \"${_insist_signing_key:-false}\"; \
  }; git_sort_by_scope__rebase_________________"

# ***

# COPYD: Similar to '%' command, but adds `git rebase --gpg-sign`
# if user's `git config put-wise.sign-before-push` is true.
# - Note that signing each commit is significantly slower than not.
bind generic <C-g> >sh -c " \
  git_sort_by_scope__rebase_with_gpgSign____ () { \
    local starting_ref=\"%(commit)\"; \
    \
    PW_PID_KILL_ON_ERROR=$PPID \
      git rebase-sort-by-scope-protected-private \
        \"${starting_ref}\" \
        \"${_magic_starting_ref:-true}\" \
        \"${_enable_gpg_sign:-true}\" \
        \"${_insist_signing_key:-true}\"; \
  }; git_sort_by_scope__rebase_with_gpgSign____"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

bind generic B >sh -c " \
  git_bump_version_tag______________________ () { \
    local starting_ref=\"%(commit)\"; \
    \
    local action=\"%(prompt Part: [M]ajor|[m]inor|[p]atch|[a]lpha|[l]east|[s]ame|[c]urrent / Target: [A]utomatic|[h|H]ead|[S]elected / Default: lA / ? )\"; \
    \
    if [ -z \"${action}\" ]; then \
      action=\"lA\"; \
    elif ! echo \"${action}\" | grep -q -e \"\(A\|h\|H\|S\)\"; then \
      action=\"${action} -A\"; \
    fi; \
    \
    PW_PID_KILL_ON_ERROR=$PPID \
      git bump-version-tag ${action} \"${starting_ref}\"; \
  }; git_bump_version_tag______________________"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

bind main M >sh -c " \
  make_lint_________________________________ () { \
    local retcode; \
    \
    make lint; \
    retcode=$?; \
    \
    echo; \
    \
    return ${retcode}; \
  }; make_lint_________________________________"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

