#!/bin/sh
# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=bash
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/DepoXy/depoxy#🍯
# License: MIT

source_deps () {
  # Load: warn, etc.
  #  command -v logger.sh > /dev/null && . logger.sh ||
  #    . "${SHOILERPLATE:-${HOME}/.kit/sh}/sh-logger/bin/logger.sh"

  # Load: symlink_*, infuser_prepare.
  command -v overlay-symlink.sh > /dev/null && . overlay-symlink.sh ||
    . "${OHMYREPOS_LIB:-${GITREPOSPATH:-${HOME}/.kit/git}/ohmyrepos/lib}/overlay-symlink.sh"

  # Required by distro_util.sh: tweak_errexit
  . "${HOMEFRIES_LIB:-${HOME}/.homefries/lib}/process_util.sh"
  # Load: os_is_macos.
  . "${HOMEFRIES_LIB:-${HOME}/.homefries/lib}/distro_util.sh"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

infuse_symlinks_macOS_Karabiner_Elements_complex_modifications () {
  infuse_symlinks_macOS_Karabiner_Elements_complex_modifications_prepare
  infuse_symlinks_macOS_Karabiner_Elements_complex_modifications_apply
}

# 2023-02-28: 🐘 Karabiner-Elephants is a new spin-off from DepoXy,
# so for now we'll adapt to the current workflow, as opposed to
# wiring something different:
# - DepoXy symlinks its own
#     ~/.depoxy/ambers/.config/karabiner/assets/complex_modifications
#   directory under ~/.config/karabiner/assets/.
# - Also, DepoXy Client injects itself by symlinking its individual
#   complex_modifications JSON files from within DepoXy's directory.
# - So we'll follow suit: Inject Karabiner-Elephants into DepoXy.
infuse_symlinks_macOS_Karabiner_Elements_complex_modifications_prepare () {
  local ambers_dir="${DEPOXYAMBERS_DIR:-${DEPOXYDIR_BASE_FULL:-${HOME}/.depoxy}/ambers}"

  symlink_kbmods_using_file_symlinks \
    "${ambers_dir}/home" \
    "${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/Karabiner-Elephants/complex_modifications" \
    "${ambers_dir}/home/.config/karabiner/assets/complex_modifications--DXY"
}

symlink_kbmods_using_file_symlinks () {
  local target_root="${1:-${HOME}}"
  shift

  local before_cd="$(pwd -L)"

  # Determine target directory, e.g.,
  #   ~/.config/karabiner/assets/complex_modifications
  # Or:
  #   ~/.depoxy/ambers/home/.config/karabiner/assets/complex_modifications
  local kb_assets=".config/karabiner/assets"
  local cmplxmods="complex_modifications"
  local target_assets="${target_root}/${kb_assets}"

  check_target_moddir_exists "${target_assets}" || return 0

  local target_moddir="${target_assets}/${cmplxmods}"

  mkdir -p "${target_moddir}"
  cd "${target_moddir}"

  # This fcn. used to reset and remove symlinks first,
  # but DepoXy Client also symlinks its files to DXY's
  # complex_modifications/.
  # - We could insist that DepoXy Client be `order`'ed
  #   later in the OMR config.
  # - Or we could just not remove links, which seems
  #   reasonable now that DXY's complex_modifications/
  #   is only symlinks.
  # 
  #  # Remove existing links.
  #  find . -maxdepth 1 -type l -exec rm -- {} +

  local source_mods
  local jsonpath

  for source_mods in "$@"; do
    # SAVVY: On macOS, `-type f` excludes symlinks, so need `-type f -o -type l`.
    for jsonpath in $( \
      find "${source_mods}" -maxdepth 1 -type f -o -type l \
    ); do
      symlink_overlay_file "${jsonpath}"
    done
  done

  cd "${before_cd}"
}

check_target_moddir_exists () {
  local target_moddir="$1"

  [ ! -d "${target_moddir}" ] || return 0

  if os_is_macos; then
    warn "Skipping complex_modifications overlay: No such directory:"
    warn "  ${target_moddir}"
  fi

  return 1
}

# ***

# TRACK/2020-11-22: After reboot, the symlink is missing!
# - No longer at: ~/.config/karabiner/assets/complex_modifications
#   - I wonder if KE whacked it on boot? If so, you could possibly
#     symlink each file instead of the directory
#     - MAYBE: If KE removes the config directory symlink on boot,
#              call instead:
#                symlink_kbmods_using_file_symlinks
#              (see comment below).
# CXREF: DepoXy Client KB infuser:
#   depoxy_client_id_infuse_karabiner_elements_complex_modifications
#     ~/.depoxy/ambers/archetype/_mrconfig.EVAL.omr:751
infuse_symlinks_macOS_Karabiner_Elements_complex_modifications_apply () {
  local before_cd="$(pwd -L)"

  local kb_assets=".config/karabiner/assets"
  local cmplxmods="complex_modifications"

  local home_assets="${HOME}/${kb_assets}"

  check_target_moddir_exists "${home_assets}" || return 0

  cd "${home_assets}"

  symlink_kbmods_using_directory_symlink () {
    # Remove symlinks and (if directory then empty) remove directory,
    # and use directory symlink instead of individual file symlinks.
    # - This makes it easier to maintain two sets of source JSON,
    #   one public (DepoXy Ambers) and one private (DepoXy Client).

    # Remove directory if exists, but if not empty, fail task
    # and require user to manually figure it out.
    if [ -d "${cmplxmods}" ] && [ ! -h "${cmplxmods}" ]; then
      # Fails if non-empty. Then YOU fix.
      rmdir "${cmplxmods}"
    fi

    symlink_overlay_dir "${HOME}/.mrinfuse/${kb_assets}/${cmplxmods}"
  }

  # CXREF: See *TRACK/2020-11-22* comment, above.
  #  # The ~/.mrinfuse path is equivalently:
  #  #   "${MR_REPO}/${kb_assets}/${cmplxmods}"
  #  # aka 
  #  #   "${ambers_dir}/${kb_assets}/${cmplxmods}"
  #  symlink_kbmods_using_file_symlinks \
  #    "${HOME}" \
  #    "${HOME}/.mrinfuse/${kb_assets}/${cmplxmods}"
  symlink_kbmods_using_directory_symlink

  cd "${before_cd}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# OBSOLETE?/2021-08-22: This symlink probably not necessary anymore.
# - This symlink was useful for a command I had plumbed to Karabiner-
#   Elements launchers, but I've since found a better way to call
#   MacVim from KE: Add /usr/local/bin to PATH, then call `gvim`. 
# FIXME/2021-08-22: Remove this function (reduce techincal debt!).
# FIXME/2021-08-22: If that works, disable custom homebrew-autoupdate.

# ***

# MacVim installs to a path that includes the version number, e.g.,
#   /usr/local/Cellar/macvim/8.2-169_2
# which makes it hard to create generic commands that call the
# executable directly (I have a few Karabiner-Elements hotkeys
# that need the full path).
# - So make a 'latest' -> symlink, problem solved.
#
# YOU: Run `infuse` (or this function) after any `brew install {}`
#      command (or other command that upgrades MacVim to the latest
#      version).

infuse_symlink_macOS_MacVim_latest_version_symlink () {
  local macvim_base="/usr/local/Cellar/macvim"
  local latest_symlink="latest"

  [ ! -d "${macvim_base}" ] && return

  local before_cd="$(pwd -L)"

  cd "${macvim_base}"

  local latest_version
  latest_version="$(
    basename -- "$(
      find . -maxdepth 1 -mindepth 1 -type d |
        sort |
        head -1
    )"
  )"

  debug " MacVim: Latest vers: ${latest_version}"
  # [ -h "${latest_symlink}" ] && command rm "${latest_symlink}"
  # [ ! -e "${latest_symlink}" ] && ln -s "${latest_version}" "${latest_symlink}"
  symlink_overlay_dir "${latest_version}" "${latest_symlink}"

  # Cleanup.
  cd "${before_cd}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  set -e

  source_deps

  [ "$(basename -- "$0")" != "infuse-platform-macOS" ] || LOG_LEVEL=0

  # Set MR_REPO, say hello (emit $MR_REPO), and look for --switches.
  local ambers_dir="${DEPOXYAMBERS_DIR:-${DEPOXYDIR_BASE_FULL:-${HOME}/.depoxy}/ambers}"
  infuser_prepare "${ambers_dir}" "$@"

  local before_cd="$(pwd -L)"
  cd ${MR_REPO}

  # ***

  infuse_symlinks_macOS_Karabiner_Elements_complex_modifications

  infuse_symlink_macOS_MacVim_latest_version_symlink

  # ***

  cd "${before_cd}"
}


# Run the infuser iff being executed.
if ! $(printf %s "$0" | grep -q -E '(^-?|\/)(ba|da|fi|z)?sh$' -); then
  main "$@"
fi

unset -f main

