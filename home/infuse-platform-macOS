#!/bin/sh
# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=bash
# Author: Landon Bouma <https://tallybark.com/>
# Project: https://github.com/DepoXy/depoxy#🍯
# License: MIT

source_deps () {
  # Load: warn, etc.
  #  command -v logger.sh > /dev/null && . logger.sh ||
  #    . "${SHOILERPLATE:-${HOME}/.kit/sh}/sh-logger/bin/logger.sh"

  # Load: symlink_*, infuser_prepare.
  # - CXREF: ~/.kit/git/ohmyrepos/lib/overlay-symlink.sh
  # Update PATH, in case this file run directly by user, because OMR
  # expects all its deps to be on PATH.
  export PATH="${PATH}:${OHMYREPOS_LIB:-${GITREPOSPATH:-${HOME}/.kit/git}/ohmyrepos/lib}"
  . "overlay-symlink.sh"

  # Required by distro_util.sh: tweak_errexit
  . "${HOMEFRIES_LIB:-${HOME}/.kit/sh/home-fries/lib}/process_util.sh"
  # Load: os_is_macos.
  . "${HOMEFRIES_LIB:-${HOME}/.kit/sh/home-fries/lib}/distro_util.sh"

  # Load: remove_symlink_hierarchy_safe
  # CXREF: ~/.kit/git/myrepos-mredit-command/lib/link_deep.sh
  . "${GITREPOSPATH:-${HOME}/.kit/git}/myrepos-mredit-command/lib/link_deep.sh"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

infuse_symlinks_depoxy_Karabiner_Elements_symlinks () {
  (
    # I.e., ~/.depoxy/ambers/home/.config/karabiner/assets
    cd "home/.config/karabiner/assets"

    # ***

    local kit_mos="${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}"
    local ke_mods="${kit_mos}/Karabiner-Elephants/complex_modifications"

    if [ -d "${ke_mods}" ]; then
      symlink_overlay_dir "${ke_mods}" "complex_modifications--KBE"
    fi

    # ***

    local active_dxc="${DEPOXYDIR_BASE_FULL:-${HOME}/.depoxy}/running"
    local dxc_mods="${active_dxc}/home/.config/karabiner/assets/complex_modifications"

    if [ -d "${dxc_mods}" ]; then
      symlink_overlay_dir "${dxc_mods}" "complex_modifications--DXC"
    fi
  )
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

infuse_symlinks_macOS_Karabiner_Elements_complex_modifications () {
  infuse_symlinks_macOS_Karabiner_Elements_complex_modifications_prepare
  infuse_symlinks_macOS_Karabiner_Elements_complex_modifications_apply
}

# 2023-02-28: 🐘 Karabiner-Elephants is a new spin-off from DepoXy,
# so for now we'll adapt to the current workflow, as opposed to
# wiring something different:
# - DepoXy symlinks its own
#     ~/.depoxy/ambers/.config/karabiner/assets/complex_modifications
#   directory under ~/.config/karabiner/assets/.
# - Also, DepoXy Client injects itself by symlinking its individual
#   complex_modifications JSON files from within DepoXy's directory.
# - So we'll follow suit: Inject Karabiner-Elephants into DepoXy.
infuse_symlinks_macOS_Karabiner_Elements_complex_modifications_prepare () {
  local ambers_dir="${DEPOXYAMBERS_DIR:-${DEPOXYDIR_BASE_FULL:-${HOME}/.depoxy}/ambers}"

  symlink_kbmods_using_file_symlinks \
    "${ambers_dir}/home" \
    "${MOSREPOSPATH:-${DOPP_KIT:-${HOME}/.kit}/mOS}/Karabiner-Elephants/complex_modifications" \
    "${ambers_dir}/home/.config/karabiner/assets/complex_modifications--DXY"
}

symlink_kbmods_using_file_symlinks () {
  local target_root="${1:-${HOME}}"
  shift

  local before_cd="$(pwd -L)"

  # Determine target directory, e.g.,
  #   ~/.config/karabiner/assets/complex_modifications
  # Or:
  #   ~/.depoxy/ambers/home/.config/karabiner/assets/complex_modifications
  local kb_assets=".config/karabiner/assets"
  local cmplxmods="complex_modifications"
  local target_assets="${target_root}/${kb_assets}"

  if [ ! -d "${target_assets}" ]; then
    # TRACK/2024-04-16: This path unlikely, because ${target_assets}
    #   is ~/.depoxy/ambers/home/.config/karabiner/assets
    warn "ERROR: Unexpected: No such directory:"
    warn "  ${target_assets}"

    return 0
  fi

  local target_moddir="${target_assets}/${cmplxmods}"

  mkdir -p -- "${target_moddir}"
  cd -- "${target_moddir}"

  remove_symlink_hierarchy_safe

  # This fcn. used to reset and remove symlinks first,
  # but DepoXy Client also symlinks its files to DXY's
  # complex_modifications/.
  # - We could insist that DepoXy Client be `order`'ed
  #   later in the OMR config.
  # - Or we could just not remove links, which seems
  #   reasonable now that DXY's complex_modifications/
  #   is only symlinks.
  #
  #  # Remove existing links.
  #  find . -maxdepth 1 -type l -exec rm -- {} +

  local source_mods
  local jsonpath

  for source_mods in "$@"; do
    # SAVVY: On macOS, `-type f` excludes symlinks, so need `-type f -o -type l`.
    for jsonpath in $( \
      find "${source_mods}" -maxdepth 1 -type f -o -type l \
    ); do
      symlink_overlay_file "${jsonpath}"
    done
  done

  cd "${before_cd}"
}

# ***

# TRACK/2020-11-22: After reboot, the symlink is missing!
# - No longer at: ~/.config/karabiner/assets/complex_modifications
#   - I wonder if KE whacked it on boot? If so, you could possibly
#     symlink each file instead of the directory
#     - MAYBE: If KE removes the config directory symlink on boot,
#              call instead:
#                symlink_kbmods_using_file_symlinks
#              (see comment below).
# CXREF: DepoXy Client KB infuser:
#   depoxy_client_id_infuse_karabiner_elements_complex_modifications
#     ~/.depoxy/ambers/archetype/.mrconfigs/_mrconfig.EVAL.omr:751
infuse_symlinks_macOS_Karabiner_Elements_complex_modifications_apply () {
  local before_cd="$(pwd -L)"

  local kb_assets=".config/karabiner/assets"
  local cmplxmods="complex_modifications"

  local home_assets="${HOME}/${kb_assets}"

  ensure_target_moddir_exists () {
    local target_moddir="$1"

    if [ ! -d "${target_moddir}" ]; then
      info "Creating KB assets directory:"
      info "  ${target_moddir}"

      mkdir -p -- "${target_moddir}"
    fi
  }
  ensure_target_moddir_exists "${home_assets}"

  cd "${home_assets}"

  symlink_kbmods_using_directory_symlink () {
    # Remove symlinks and (if directory then empty) remove directory,
    # and use directory symlink instead of individual file symlinks.
    # - This makes it easier to maintain two sets of source JSON,
    #   one public (DepoXy Ambers) and one private (DepoXy Client).

    # Remove directory if exists, but if not empty, fail task
    # and require user to manually figure it out.
    if [ -d "${cmplxmods}" ] && [ ! -h "${cmplxmods}" ]; then
      # Fails if non-empty. Then YOU fix.
      rmdir "${cmplxmods}"
    fi

    local ambers_dir="${DEPOXYAMBERS_DIR:-${DEPOXYDIR_BASE_FULL:-${HOME}/.depoxy}/ambers}"

    symlink_overlay_dir "${ambers_dir}/home/${kb_assets}/${cmplxmods}"
  }

  # CXREF: See *TRACK/2020-11-22* comment, above.
  #  # The ~/.mrinfuse path is equivalently:
  #  #   "${MR_REPO}/${kb_assets}/${cmplxmods}"
  #  # aka
  #  #   "${ambers_dir}/${kb_assets}/${cmplxmods}"
  #  symlink_kbmods_using_file_symlinks \
  #    "${HOME}" \
  #    "${HOME}/.mrinfuse/${kb_assets}/${cmplxmods}"
  symlink_kbmods_using_directory_symlink

  cd "${before_cd}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# OBSOLETE?/2021-08-22: This symlink probably not necessary anymore.
# - This symlink was useful for a command I had plumbed to Karabiner-
#   Elements launchers, but I've since found a better way to call
#   MacVim from KE: Add /usr/local/bin to PATH, then call `gvim`.
# FIXME/2021-08-22: Remove this function (reduce techincal debt!).
# FIXME/2021-08-22: If that works, disable custom homebrew-autoupdate.

# ***

# MacVim installs to a path that includes the version number, e.g.,
#   /usr/local/Cellar/macvim/8.2-169_2
# which makes it hard to create generic commands that call the
# executable directly (I have a few Karabiner-Elements hotkeys
# that need the full path).
# - So make a 'latest' -> symlink, problem solved.
#
# YOU: Run `infuse` (or this function) after any `brew install {}`
#      command (or other command that upgrades MacVim to the latest
#      version).

infuse_symlink_macOS_MacVim_latest_version_symlink () {
  local macvim_base="/usr/local/Cellar/macvim"
  local latest_symlink="latest"

  [ ! -d "${macvim_base}" ] && return

  local before_cd="$(pwd -L)"

  cd "${macvim_base}"

  local latest_version
  latest_version="$(
    basename -- "$(
      find . -maxdepth 1 -mindepth 1 -type d |
        sort |
        head -1
    )"
  )"

  debug " MacVim: Latest vers: ${latest_version}"
  # [ -h "${latest_symlink}" ] && command rm "${latest_symlink}"
  # [ ! -e "${latest_symlink}" ] && ln -s "${latest_version}" "${latest_symlink}"
  symlink_overlay_dir "${latest_version}" "${latest_symlink}"

  # Cleanup.
  cd "${before_cd}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Creates symlinks to user home that you can use when making full
# path symlinks that you can then share between hosts running
# different OSes or using different user names.
# - For sharing between OSes, note that macOS uses /Users/<user>
#   and Debian uses /home/<user>, but that on macOS, which uses
#   a read-only root file system, you cannot create a similar
#   /home directory. But you can create /Users/user -> <user>
#   (and then likewise on Linux, create /Users/user -> ${HOME})
# - For sharing between hosts with different user names, consider
#   /Users/foo on one, and /Users/bar on another. If you use the
#   /Users/user path when creating symlinks, they'll work on
#   both hosts.
#   - You could instead symlink /Users/bar -> foo on one host
#     and /Users/foo -> bar on the other. But the author likes
#     to use user-agnostic home paths. For one, they're copy-
#     pasteable to documentation without you needing to change
#     the username to something generic (if that's your thing).
#
# - UCASE/TL_DR: For sharing project symlinks between @macOS and
#   @Linux hosts, and between hosts that use different user names.
#
# Or, if you prefer a home-agnostic path that's all lowercase,
# consider that /private is writeable on macOS, so a symlink
# is also made at /private/user (in addition to /Users/user).

infuse_symlinks_macOS_create_agnostic_user_homes () {
  local users_source="${LOGNAME}"
  local users_target="/Users/user"

  # Create symlink: /Users/user -> <user>
  sudo_create_symlink_if_sudo_unlocked "${users_source}" "${users_target}" "${HOME}"

  # ***

  local privy_source="${HOME}"
  local privy_target="/private/user"

  # Create symlink: /private/user -> /Users/<user>
  sudo_create_symlink_if_sudo_unlocked "${privy_source}" "${privy_target}" "${HOME}"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

# Set @macOS /var/select/sh -> /bin/dash to avoid Bash v3 issues,
# including ENV= bleed after 'local' usage, e.g.,
#
#   /bin/bash --posix -c 'unset -v FOO; foo () { :; }; bar () {
#     FOO=123 foo; echo FOO=$FOO; local baz; FOO=abc foo; echo FOO=$FOO;
#   }; bar'
#   FOO=
#   FOO=abc
#
# - Vs.
#
#   /opt/homebrew/bin/bash --posix -c 'unset -v FOO; foo () { :; }; bar () {
#     FOO=123 foo; echo FOO=$FOO; local baz; FOO=abc foo; echo FOO=$FOO;
#   }; bar'
#   FOO=
#   FOO=

infuse_symlinks_macOS_set_var_select_sh_to_dash () {
  local preferred_sh="${DEPOXY_DEFAULT_SELECT_SH:-/bin/dash}"
  local sh_chooser="/var/select/sh"

  if [ -z "${DEPOXY_DEFAULT_SELECT_SH}" ]; then
    info "$(font_info_skipped "Opt-out!") sh !$(font_emphasize "selected")" \
      "$(font_highlight "${sh_chooser}") ->" \
      "$(font_highlight "$(realpath -- "${sh_chooser}")")"

    return 0
  fi

  # Create symlink: /var/select/sh -> /bin/dash
  sudo_create_symlink_if_sudo_unlocked \
    "${preferred_sh}" \
    "${sh_chooser}" \
    "$(realpath -- "${preferred_sh}")"
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

sudo_create_symlink_if_sudo_unlocked () {
  local syml_source="$1"
  local syml_target="$2"
  local target_real="$3"

  local srctype="file"
  if [ -d "${target_real}" ]; then
    srctype="dir"
  fi

  if [ "$(realpath -- "${syml_target}")" = "${target_real}" ]; then
    info "$(symlink_get_msg_informative \
      "$(font_info_checked "Verified")" "${srctype}" \
      "${syml_target}" "${syml_source}" \
    )"
  elif ! sudo_has_cached_credentials; then
    warn "$(symlink_get_msg_informative \
      " $(font_highlight "Skipped")" "${srctype}" \
      "${syml_target}" "${syml_source}" \
    )"
    warn "DO THIS: Please cache admin password (sudo -v) so we can update symlink:" \
      "$(font_highlight "${syml_target}")"

    return 1
  elif [ -d "${target_real}" ]; then
    MRT_SUDO=sudo symlink_overlay_dir "${syml_source}" "${syml_target}"
  else
    MRT_SUDO=sudo symlink_overlay_file "${syml_source}" "${syml_target}"
  fi
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

sudo_has_cached_credentials () {
  sudo -nv 2> /dev/null
}

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #

main () {
  set -e

  # Unset MR_CONFIG so that the OMR/lib source_deps fcns run.
  MR_CONFIG= source_deps

  if [ "$(basename -- "$0")" = "infuse-platform-macOS" ]; then
    LOG_LEVEL=${MR_LOG_LEVEL:-${LOG_LEVEL_VVVERBOSE:-0}}
  else
    LOG_LEVEL=${MR_LOG_LEVEL:-${LOG_LEVEL_TRACE:-10}}
  fi

  # Set MR_REPO, say hello (emit $MR_REPO), and look for --switches.
  local ambers_dir="${DEPOXYAMBERS_DIR:-${DEPOXYDIR_BASE_FULL:-${HOME}/.depoxy}/ambers}"
  infuser_prepare "${ambers_dir}" "$@"

  (
    cd "${MR_REPO}"

    infuse_symlinks_depoxy_Karabiner_Elements_symlinks

    if ! os_is_macos; then

      return 0
    fi

    # ***

    infuse_symlinks_macOS_Karabiner_Elements_complex_modifications

    infuse_symlink_macOS_MacVim_latest_version_symlink

    infuse_symlinks_macOS_create_agnostic_user_homes

    infuse_symlinks_macOS_set_var_select_sh_to_dash
  )
}


# Run the infuser iff being executed.
SCRIPT_NAME="infuse-platform-macOS"
if [ "$(basename -- "$(realpath -- "$0")")" = "${SCRIPT_NAME}" ]; then
  main "$@"
fi

unset -f main

